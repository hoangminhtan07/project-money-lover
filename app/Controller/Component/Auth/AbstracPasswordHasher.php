 <?php
  /**
 3:  * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 4:  * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 5:  *
 6:  * Licensed under The MIT License
 7:  * For full copyright and license information, please see the LICENSE.txt
 8:  * Redistributions of files must retain the above copyright notice.
 9:  *
10:  * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
11:  * @link          http://cakephp.org CakePHP(tm) Project
12:  * @since         2.4.0
13:  * @license       http://www.opensource.org/licenses/mit-license.php MIT License
14:  */
 namespace Cake\Auth;
 
 use Cake\Core\InstanceConfigTrait;
 
 /**
20:  * Abstract password hashing class
21:  *
22:  */
 abstract class AbstractPasswordHasher
 {
 
     use InstanceConfigTrait;
 
     /**
29:      * Default config
30:      *
31:      * These are merged with user-provided config when the object is used.
32:      *
33:      * @var array
34:      */
     protected $_defaultConfig = [];

     /**
38:      * Constructor
39:      *
40:      * @param array $config Array of config.
41:      */
     public function __construct(array $config = [])
     {
         $this->config($config);
     }
     /**
48:      * Generates password hash.
49:      *
50:      * @param string|array $password Plain text password to hash or array of data
51:      *   required to generate password hash.
52:      * @return string Password hash
53:      */
    abstract public function hash($password);
 
     /**
57:      * Check hash. Generate hash from user provided password string or data array
58:      * and check against existing hash.
59:      *
60:      * @param string|array $password Plain text password to hash or data array.
61:      * @param string $hashedPassword Existing hashed password.
62:      * @return bool True if hashes match else false.
63:      */
     abstract public function check($password, $hashedPassword);
      /**
67:      * Returns true if the password need to be rehashed, due to the password being
68:      * created with anything else than the passwords generated by this class.
69:      *
70:      * Returns true by default since the only implementation users should rely
71:      * on is the one provided by default in php 5.5+ or any compatible library
72:      *
73:      * @param string $password The password to verify
74:      * @return bool
75:      */
     public function needsRehash($password)
     {
         return password_needs_rehash($password, PASSWORD_DEFAULT);
     }
 }